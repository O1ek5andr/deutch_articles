import os
import json, datetime, random
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)
from utils import safe_edit_message_text

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

user_state = {}

async def error_handler(update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Exception: {context.error}")

async def articles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>üìò –û–∑–Ω–∞—á–µ–Ω—ñ –∞—Ä—Ç–∏–∫–ª—ñ (der, die, das)</b>\n\n"
        "<pre>"
        "          | m     | f     | n     | pl       \n"
        "----------+-------+-------+-------+-------\n"
        "Nominativ | der   | die   | das   | die      \n"
        "Akkusativ | den   | die   | das   | die      \n"
        "Dativ     | dem   | der   | dem   | den      \n"
        "Genitiv   | des   | der   | des   | der      \n"
        "</pre>\n"
        "<b>üìó –ù–µ–æ–∑–Ω–∞—á–µ–Ω—ñ –∞—Ä—Ç–∏–∫–ª—ñ (ein, eine)</b>\n\n"
        "<pre>"
        "          | m     | f     | n     \n"
        "----------+-------+-------+-------\n"
        "Nominativ | ein   | eine  | ein   \n"
        "Akkusativ | einen | eine  | ein   \n"
        "Dativ     | einem | einer | einem \n"
        "Genitiv   | eines | einer | eines \n"
        "</pre>\n"
        "‚ÑπÔ∏è –£ –º–Ω–æ–∂–∏–Ω—ñ –Ω–µ–æ–∑–Ω–∞—á–µ–Ω—ñ –∞—Ä—Ç–∏–∫–ª—ñ –Ω–µ –≤–∂–∏–≤–∞—é—Ç—å—Å—è."
    )

    if update.message:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_result_keyboard())
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, parse_mode="HTML", reply_markup=get_result_keyboard())
        
def get_filtered_questions(case: str, gender: str, limit: int = 5):
    try:
        with open("deutch_articles.json", "r", encoding="utf-8") as f:
            all_questions = json.load(f)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω—å: {e}")
        return []

    filtered = [q for q in all_questions if q.get("case") == case and q.get("gender") == gender]
    return random.sample(filtered, min(limit, len(filtered)))

def get_result_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="restart")],
        [InlineKeyboardButton("üß† –û–±—Ä–∞—Ç–∏ –≤—ñ–¥–º—ñ–Ω–æ–∫ —ñ —Ä—ñ–¥", callback_data="choose_start")],
        [InlineKeyboardButton("üìö –ê—Ä—Ç–∏–∫–ª—ñ", callback_data="show_articles")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])

# --- –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
def log_result(user_id, username, first_name, question, user_answer, correct_answer, is_correct):
    log_entry = {
        "time": datetime.datetime.now().isoformat(timespec="seconds"),
        "user_id": user_id,
        "username": username,
        "first_name": first_name,
        "question": question,
        "answer": user_answer,
        "correct": correct_answer,
        "result": "OK" if is_correct else "FAIL"
    }

    if os.path.exists("results.json"):
        with open("results.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []

    data.append(log_entry)

    with open("results.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def get_user_stats(user_id):
    if not os.path.exists("results.json"):
        return {"OK": 0, "FAIL": 0, "PERCENT": 0}

    with open("results.json", "r", encoding="utf-8") as f:
        data = json.load(f)

    ok = sum(1 for entry in data if entry["user_id"] == user_id and entry["result"] == "OK")
    fail = sum(1 for entry in data if entry["user_id"] == user_id and entry["result"] == "FAIL")
    total = ok + fail
    percent = round((ok / total) * 100, 2) if total > 0 else 0

    return {"OK": ok, "FAIL": fail, "PERCENT": percent}

# --- –§—É–Ω–∫—Ü—ñ—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É ---
def get_leaderboard(top_n=5):
    if not os.path.exists("results.json"):
        return []

    with open("results.json", "r", encoding="utf-8") as f:
        data = json.load(f)

    scores = {}
    for entry in data:
        uid = entry["user_id"]
        name = entry.get("username") or entry.get("first_name") or str(uid)
        if uid not in scores:
            scores[uid] = {"name": name, "ok": 0, "fail": 0}
        if entry["result"] == "OK":
            scores[uid]["ok"] += 1
        else:
            scores[uid]["fail"] += 1

    for uid, s in scores.items():
        total = s["ok"] + s["fail"]
        s["percent"] = round((s["ok"] / total) * 100, 2) if total > 0 else 0

    # üîΩ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    sorted_scores = sorted(scores.values(), key=lambda x: x["percent"], reverse=True)
    return sorted_scores[:top_n]

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    with open("deutch_articles.json", "r", encoding="utf-8") as f:
        all_questions = json.load(f)

    selected = random.sample(all_questions, 5)
    user_state[user_id] = {'index': 0, 'quiz': selected}

    await update.message.reply_text("üîé –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç —ñ–∑ 5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å!")
    await send_question(update, context)

async def select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text(
            "‚öôÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /select <–í—ñ–¥–º—ñ–Ω–æ–∫> <–†—ñ–¥>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /select Akkusativ masculine\n\n"
            "–í—ñ–¥–º—ñ–Ω–∫–∏: Nominativ, Akkusativ, Dativ, Genitiv\n"
            "–†–æ–¥–∏: masculine, feminine, neuter, plural"
        )
        return

    case, gender = args[0], args[1]

    selected = get_filtered_questions(case, gender)
    user_id = update.effective_user.id
    user_state[user_id] = {'index': 0, 'quiz': selected}

    await update.message.reply_text(f"üîé –û–±—Ä–∞–Ω–æ 5 –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {case} {gender}. –ü–æ—á–∏–Ω–∞—î–º–æ!")
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é /start –∞–±–æ /select.")
        return

    index = state['index']
    quiz = state['quiz']

    if index >= len(quiz):
        keyboard = get_result_keyboard()
        if update.message:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü—å!\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        elif update.callback_query:
            await update.callback_query.message.reply_text("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü—å!\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        return

    q = quiz[index]
    options = [[opt] for opt in q['options']]
    markup = ReplyKeyboardMarkup(options, one_time_keyboard=True, resize_keyboard=True)

    if update.message:
        await update.message.reply_text(q['question'], reply_markup=markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(q['question'], reply_markup=markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username
    first_name = user.first_name

    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç.")
        return

    quiz = state['quiz']
    index = state['index']
    q = quiz[index]

    user_answer = update.message.text.strip()
    correct = q['options'][q['answer'][0]]
    is_correct = (user_answer == correct)

    if is_correct:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n" + q['explanation'])
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct}\n" + q['explanation'])

    log_result(user_id, username, first_name, q['question'], user_answer, correct, is_correct)

    state['index'] += 1
    await send_question(update, context)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    leaders = get_leaderboard()
    if not leaders:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")
        return

    text = "üèÜ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥:\n"
    for i, entry in enumerate(leaders, start=1):
        text += f"{i}. üë§ {entry['name']} ‚Äî {entry['ok']} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö ({entry['percent']}%)\n"
    await update.message.reply_text(text)

user_selection = {}  # —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # --- –í–∏–±—ñ—Ä –≤—ñ–¥–º—ñ–Ω–∫–∞ ---
    if data.startswith("choose_case_"):
        case = data.replace("choose_case_", "")
        user_selection[user_id] = {"case": case}
        genders = ["masculine", "feminine", "neuter", "plural"]
        keyboard = [[InlineKeyboardButton(g, callback_data=f"choose_gender_{g}")] for g in genders]
        await query.edit_message_text(f"üìå –û–±—Ä–∞–Ω–æ –≤—ñ–¥–º—ñ–Ω–æ–∫: {case}\nüîò –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ä—ñ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # --- –í–∏–±—ñ—Ä —Ä–æ–¥—É + –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É ---
    elif data.startswith("choose_gender_"):
        gender = data.replace("choose_gender_", "")
        if user_id not in user_selection or "case" not in user_selection[user_id]:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –≤—ñ–¥–º—ñ–Ω–æ–∫.")
            return

        case = user_selection[user_id]["case"]
        user_selection[user_id]["gender"] = gender

        selected = get_filtered_questions(case, gender)

        user_state[user_id] = {'index': 0, 'quiz': selected}
        await query.edit_message_text(f"üîé –û–±—Ä–∞–Ω–æ 5 –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {case} {gender}. –ü–æ—á–∏–Ω–∞—î–º–æ!")
        await send_question(update, context)
        return

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ / –†–µ—Å—Ç–∞—Ä—Ç ---
    elif data == "my_stats":
        stats = get_user_stats(user_id)
        await query.edit_message_text(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: {stats['OK']}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: {stats['FAIL']}\n"
            f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {stats['PERCENT']}%",
            reply_markup=get_result_keyboard()
        )
        return

    elif data == "leaderboard":
        leaders = get_leaderboard()
        if not leaders:
            await query.edit_message_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.", reply_markup=get_result_keyboard())
            return

        text = "üèÜ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥:\n"
        for i, entry in enumerate(leaders, start=1):
            text += f"{i}. üë§ {entry['name']} ‚Äî {entry['ok']} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö ({entry['percent']}%)\n"
        await safe_edit_message_text(query, text, get_result_keyboard())

        return

    elif data == "restart":
        with open("deutch_articles.json", "r", encoding="utf-8") as f:
            all_questions = json.load(f)
        selected = random.sample(all_questions, 5)
        user_state[user_id] = {'index': 0, 'quiz': selected}
        await query.edit_message_text("üîÅ –ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ!")
        await send_question(update, context)
        return
    elif data == "choose_start":
        cases = ["Nominativ", "Akkusativ", "Dativ", "Genitiv"]
        keyboard = [[InlineKeyboardButton(case, callback_data=f"choose_case_{case}")] for case in cases]
        await query.edit_message_text("üîò –û–±–µ—Ä–∏ –≤—ñ–¥–º—ñ–Ω–æ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    elif data == "main_menu":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üß† –û–±—Ä–∞—Ç–∏ –≤—ñ–¥–º—ñ–Ω–æ–∫ —ñ —Ä—ñ–¥", callback_data="choose_start")],
            [InlineKeyboardButton("üé≤ –ü—Ä–æ–π—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ—Å—Ç", callback_data="restart")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data="leaderboard")]
        ])
        await query.edit_message_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        return
    elif data == "help":
        help_text = (
            "‚ùì <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üß† <b>/choose</b> ‚Äî –æ–±—Ä–∞—Ç–∏ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é (–≤—ñ–¥–º—ñ–Ω–æ–∫ + —Ä—ñ–¥)\n"
            "üé≤ <b>/start</b> ‚Äî –ø—Ä–æ–π—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ—Å—Ç —ñ–∑ 5 –∑–∞–≤–¥–∞–Ω—å\n"
            "‚öôÔ∏è <b>/select Akkusativ masculine</b> ‚Äî –≤—Ä—É—á–Ω—É –∑–∞–¥–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é\n"
            "üìä <b>/stats</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "üèÜ <b>/leaderboard</b> ‚Äî —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ç–æ—á–Ω—ñ—Å—Ç—é\n\n"
            "‚úÖ –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —Ç–∏ –ø–æ–±–∞—á–∏—à –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É, –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–±–æ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ—ó —Ç–µ–º–∏."
        )
        await query.edit_message_text(help_text, reply_markup=get_result_keyboard(), parse_mode="HTML")
        return
    elif data == "show_articles":
        await articles(update, context)
        return

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = get_user_stats(user_id)
    await update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: {stats['OK']}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: {stats['FAIL']}\n"
        f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {stats['PERCENT']}%"
    )
    
async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cases = ["Nominativ", "Akkusativ", "Dativ", "Genitiv"]
    keyboard = [[InlineKeyboardButton(case, callback_data=f"choose_case_{case}")] for case in cases]
    await update.message.reply_text("üîò –û–±–µ—Ä–∏ –≤—ñ–¥–º—ñ–Ω–æ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))
    
def main():
    print(">>> main() —Å—Ç–∞—Ä—Ç—É–≤–∞–≤")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(CommandHandler("select", select))
    app.add_handler(CommandHandler("choose", choose))
    app.add_handler(CommandHandler("articles", articles))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    app.run_polling()

if __name__ == '__main__':
    main()